/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation CreateApiToken($accountId: String!, $input: ApiTokenInput!) {\n    createApiToken(accountId: $accountId, input: $input) {\n      id\n      name\n      generatedApiKey\n      roles\n    }\n  }\n": types.CreateApiTokenDocument,
    "\n  mutation RevokeApiToken($accountId: String!, $input: RevokeApiTokenInput!) {\n    revokeApiToken(accountId: $accountId, input: $input)\n  }\n": types.RevokeApiTokenDocument,
    "\n  mutation addActionHookSubscription(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    addActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n": types.AddActionHookSubscriptionDocument,
    "\n  mutation deleteActionHookSubscription(\n    $accountId: String!\n    $input: DeleteActionHookSubscriptionInput!\n  ) {\n    deleteActionHookSubscription(accountId: $accountId, input: $input)\n  }\n": types.DeleteActionHookSubscriptionDocument,
    "\n  mutation testActionHook(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    testActionHook(accountId: $accountId, input: $input) {\n      requestHeaders {\n        key\n        value\n      }\n      requestPayload\n      requestMethod\n      responseHeaders {\n        key\n        value\n      }\n      responseBody\n      statusCode\n    }\n  }\n": types.TestActionHookDocument,
    "\n  mutation updateActionHookSubscription(\n    $accountId: String!\n    $input: UpdateActionHookSubscriptionInput!\n  ) {\n    updateActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n": types.UpdateActionHookSubscriptionDocument,
    "\n  mutation AddItemToSale($accountId: String!, $input: AddItemToSaleInput!) {\n    addItemToSale(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n    }\n  }\n": types.AddItemToSaleDocument,
    "\n  mutation CreateItem($accountId: String!, $input: CreateItemInput!) {\n    createItem(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n": types.CreateItemDocument,
    "\n  mutation CreateItemForSale($accountId: String!, $input: SaleItemInput!) {\n    createItemForSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n": types.CreateItemForSaleDocument,
    "\n  mutation removeItemFromSale(\n    $accountId: String!\n    $input: RemoveSaleItemInput!\n  ) {\n    removeItemFromSale(accountId: $accountId, input: $input) {\n      id\n      title\n    }\n  }\n": types.RemoveItemFromSaleDocument,
    "\n  mutation UpdateItem(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateItemInput!\n  ) {\n    updateItem(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n    }\n  }\n": types.UpdateItemDocument,
    "\n  mutation UpdateItemForSale(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateSaleItemInput!\n  ) {\n    updateItemForSale(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      bids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n      reserve\n      startingBid\n      status\n      lowEstimate\n      highEstimate\n      itemNumber\n    }\n  }\n": types.UpdateItemForSaleDocument,
    "\n  mutation BidOnBehalf($accountId: String!, $input: BidOnBehalfInput!) {\n    bidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n": types.BidOnBehalfDocument,
    "\n  mutation CancelLatestBidOnItem(\n    $accountId: String!\n    $input: CancelLatestBidOnItemInput!\n  ) {\n    cancelLatestBidOnItem(accountId: $accountId, input: $input) {\n      removedBids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n    }\n  }\n": types.CancelLatestBidOnItemDocument,
    "\n  mutation CloseSale($accountId: String!, $input: CloseSaleInput!) {\n    closeSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n": types.CloseSaleDocument,
    "\n  mutation CreateSale($accountId: String!, $input: CreateSaleInput!) {\n    createSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n      currency\n      closingMethod\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n    }\n  }\n": types.CreateSaleDocument,
    "\n  mutation MaxBidOnBehalf($accountId: String!, $input: MaxBidOnBehalfInput!) {\n    maxBidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n": types.MaxBidOnBehalfDocument,
    "\n  mutation OpenSale($accountId: String!, $input: OpenSaleInput!) {\n    openSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n": types.OpenSaleDocument,
    "\n  mutation PublishSale($accountId: String!, $input: PublishSaleInput!) {\n    publishSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n": types.PublishSaleDocument,
    "\n  mutation setItemWinner($accountId: String!, $input: SetItemWinnerInput!) {\n    setItemWinner(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n": types.SetItemWinnerDocument,
    "\n  mutation SetSaleItemStatus(\n    $accountId: String!\n    $input: SetSaleItemStatusInput!\n  ) {\n    setSaleItemStatus(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n": types.SetSaleItemStatusDocument,
    "\n  mutation updateItemNumbers(\n    $accountId: String!\n    $input: UpdateItemNumbersInput!\n  ) {\n    updateItemNumbers(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n            }\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n    }\n  }\n": types.UpdateItemNumbersDocument,
    "\n  mutation UpdateSale(\n    $accountId: String!\n    $saleId: String!\n    $input: UpdateSaleInput!\n  ) {\n    updateSale(accountId: $accountId, saleId: $saleId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      sequenceNumber\n    }\n  }\n": types.UpdateSaleDocument,
    "\n  query GetAccount($accountId: String!) {\n    account(accountId: $accountId) {\n      id\n      name\n      email\n    }\n  }\n": types.GetAccountDocument,
    "\n  query GetAccounts {\n    accounts {\n      id\n      name\n      email\n    }\n  }\n": types.GetAccountsDocument,
    "\n  query GetApiTokens($accountId: String!, $first: Int, $after: String) {\n    apiTokens(accountId: $accountId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          roles\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.GetApiTokensDocument,
    "\n  query GetHookSubscriptions($accountId: String!) {\n    actionHookSubscriptions(accountId: $accountId) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n": types.GetHookSubscriptionsDocument,
    "\n  query GetItem($accountId: String!, $itemId: String!) {\n    item(accountId: $accountId, itemId: $itemId) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n      saleId\n    }\n  }\n": types.GetItemDocument,
    "\n  query GetItems(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $itemsFilter: ItemsFilter!\n  ) {\n    items(\n      accountId: $accountId\n      first: $first\n      after: $after\n      itemsFilter: $itemsFilter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          valuationAmount\n          valuationCurrency\n          saleId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n": types.GetItemsDocument,
    "\n  query SalesAggregate($accountId: String!) {\n    salesAggregate(accountId: $accountId) {\n      open\n      closing\n      closed\n      published\n      unpublished\n    }\n  }\n": types.SalesAggregateDocument,
    "\n  query GetSales(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $filter: SaleFilter\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sales(\n      accountId: $accountId\n      first: $first\n      after: $after\n      filter: $filter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          currency\n          status\n          closingMethod\n          dates {\n            closingDate\n            openDate\n          }\n          items {\n            edges {\n              node {\n                id\n                title\n                description\n              }\n            }\n          }\n          closingTimeCountdown\n          participants(take: $take, cursor: $cursor, direction: $direction) {\n            edges {\n              cursor\n              node {\n                userId\n              }\n            }\n            totalCount\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n": types.GetSalesDocument,
    "\n  query GetSale(\n    $accountId: String!\n    $id: ID!\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sale(accountId: $accountId, id: $id) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              bidId\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n              bidSequenceNumber\n            }\n            dates {\n              closingStart\n              closingEnd\n            }\n            allowedBidTypes\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n      participants(take: $take, cursor: $cursor, direction: $direction) {\n        edges {\n          cursor\n          node {\n            userId\n          }\n        }\n        totalCount\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n": types.GetSaleDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateApiToken($accountId: String!, $input: ApiTokenInput!) {\n    createApiToken(accountId: $accountId, input: $input) {\n      id\n      name\n      generatedApiKey\n      roles\n    }\n  }\n"): (typeof documents)["\n  mutation CreateApiToken($accountId: String!, $input: ApiTokenInput!) {\n    createApiToken(accountId: $accountId, input: $input) {\n      id\n      name\n      generatedApiKey\n      roles\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RevokeApiToken($accountId: String!, $input: RevokeApiTokenInput!) {\n    revokeApiToken(accountId: $accountId, input: $input)\n  }\n"): (typeof documents)["\n  mutation RevokeApiToken($accountId: String!, $input: RevokeApiTokenInput!) {\n    revokeApiToken(accountId: $accountId, input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addActionHookSubscription(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    addActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addActionHookSubscription(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    addActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteActionHookSubscription(\n    $accountId: String!\n    $input: DeleteActionHookSubscriptionInput!\n  ) {\n    deleteActionHookSubscription(accountId: $accountId, input: $input)\n  }\n"): (typeof documents)["\n  mutation deleteActionHookSubscription(\n    $accountId: String!\n    $input: DeleteActionHookSubscriptionInput!\n  ) {\n    deleteActionHookSubscription(accountId: $accountId, input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation testActionHook(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    testActionHook(accountId: $accountId, input: $input) {\n      requestHeaders {\n        key\n        value\n      }\n      requestPayload\n      requestMethod\n      responseHeaders {\n        key\n        value\n      }\n      responseBody\n      statusCode\n    }\n  }\n"): (typeof documents)["\n  mutation testActionHook(\n    $accountId: String!\n    $input: ActionHookSubscriptionInput!\n  ) {\n    testActionHook(accountId: $accountId, input: $input) {\n      requestHeaders {\n        key\n        value\n      }\n      requestPayload\n      requestMethod\n      responseHeaders {\n        key\n        value\n      }\n      responseBody\n      statusCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateActionHookSubscription(\n    $accountId: String!\n    $input: UpdateActionHookSubscriptionInput!\n  ) {\n    updateActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateActionHookSubscription(\n    $accountId: String!\n    $input: UpdateActionHookSubscriptionInput!\n  ) {\n    updateActionHookSubscription(accountId: $accountId, input: $input) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddItemToSale($accountId: String!, $input: AddItemToSaleInput!) {\n    addItemToSale(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n    }\n  }\n"): (typeof documents)["\n  mutation AddItemToSale($accountId: String!, $input: AddItemToSaleInput!) {\n    addItemToSale(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateItem($accountId: String!, $input: CreateItemInput!) {\n    createItem(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n"): (typeof documents)["\n  mutation CreateItem($accountId: String!, $input: CreateItemInput!) {\n    createItem(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateItemForSale($accountId: String!, $input: SaleItemInput!) {\n    createItemForSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n"): (typeof documents)["\n  mutation CreateItemForSale($accountId: String!, $input: SaleItemInput!) {\n    createItemForSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeItemFromSale(\n    $accountId: String!\n    $input: RemoveSaleItemInput!\n  ) {\n    removeItemFromSale(accountId: $accountId, input: $input) {\n      id\n      title\n    }\n  }\n"): (typeof documents)["\n  mutation removeItemFromSale(\n    $accountId: String!\n    $input: RemoveSaleItemInput!\n  ) {\n    removeItemFromSale(accountId: $accountId, input: $input) {\n      id\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateItem(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateItemInput!\n  ) {\n    updateItem(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateItem(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateItemInput!\n  ) {\n    updateItem(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateItemForSale(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateSaleItemInput!\n  ) {\n    updateItemForSale(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      bids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n      reserve\n      startingBid\n      status\n      lowEstimate\n      highEstimate\n      itemNumber\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateItemForSale(\n    $accountId: String!\n    $itemId: String!\n    $input: UpdateSaleItemInput!\n  ) {\n    updateItemForSale(accountId: $accountId, itemId: $itemId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      bids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n      reserve\n      startingBid\n      status\n      lowEstimate\n      highEstimate\n      itemNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation BidOnBehalf($accountId: String!, $input: BidOnBehalfInput!) {\n    bidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n"): (typeof documents)["\n  mutation BidOnBehalf($accountId: String!, $input: BidOnBehalfInput!) {\n    bidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CancelLatestBidOnItem(\n    $accountId: String!\n    $input: CancelLatestBidOnItemInput!\n  ) {\n    cancelLatestBidOnItem(accountId: $accountId, input: $input) {\n      removedBids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CancelLatestBidOnItem(\n    $accountId: String!\n    $input: CancelLatestBidOnItemInput!\n  ) {\n    cancelLatestBidOnItem(accountId: $accountId, input: $input) {\n      removedBids {\n        amount\n        maxAmount\n        userId\n        date\n        bidStatus\n        bidSequenceNumber\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CloseSale($accountId: String!, $input: CloseSaleInput!) {\n    closeSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CloseSale($accountId: String!, $input: CloseSaleInput!) {\n    closeSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSale($accountId: String!, $input: CreateSaleInput!) {\n    createSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n      currency\n      closingMethod\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSale($accountId: String!, $input: CreateSaleInput!) {\n    createSale(accountId: $accountId, input: $input) {\n      id\n      title\n      description\n      currency\n      closingMethod\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MaxBidOnBehalf($accountId: String!, $input: MaxBidOnBehalfInput!) {\n    maxBidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n"): (typeof documents)["\n  mutation MaxBidOnBehalf($accountId: String!, $input: MaxBidOnBehalfInput!) {\n    maxBidOnBehalf(accountId: $accountId, input: $input) {\n      amount\n      maxAmount\n      userId\n      date\n      bidStatus\n      bidSequenceNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OpenSale($accountId: String!, $input: OpenSaleInput!) {\n    openSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation OpenSale($accountId: String!, $input: OpenSaleInput!) {\n    openSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PublishSale($accountId: String!, $input: PublishSaleInput!) {\n    publishSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation PublishSale($accountId: String!, $input: PublishSaleInput!) {\n    publishSale(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation setItemWinner($accountId: String!, $input: SetItemWinnerInput!) {\n    setItemWinner(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n"): (typeof documents)["\n  mutation setItemWinner($accountId: String!, $input: SetItemWinnerInput!) {\n    setItemWinner(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetSaleItemStatus(\n    $accountId: String!\n    $input: SetSaleItemStatusInput!\n  ) {\n    setSaleItemStatus(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n"): (typeof documents)["\n  mutation SetSaleItemStatus(\n    $accountId: String!\n    $input: SetSaleItemStatusInput!\n  ) {\n    setSaleItemStatus(accountId: $accountId, input: $input) {\n      id\n      title\n      totalBids\n      description\n      currentBid\n      leaderId\n      saleId\n      reserve\n      startingBid\n      lowEstimate\n      highEstimate\n      itemNumber\n      bids {\n        amount\n        userId\n        date\n        bidStatus\n        maxAmount\n        bidSequenceNumber\n      }\n      dates {\n        closingStart\n        closingEnd\n      }\n      allowedBidTypes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateItemNumbers(\n    $accountId: String!\n    $input: UpdateItemNumbersInput!\n  ) {\n    updateItemNumbers(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n            }\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n    }\n  }\n"): (typeof documents)["\n  mutation updateItemNumbers(\n    $accountId: String!\n    $input: UpdateItemNumbersInput!\n  ) {\n    updateItemNumbers(accountId: $accountId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n            }\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSale(\n    $accountId: String!\n    $saleId: String!\n    $input: UpdateSaleInput!\n  ) {\n    updateSale(accountId: $accountId, saleId: $saleId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      sequenceNumber\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSale(\n    $accountId: String!\n    $saleId: String!\n    $input: UpdateSaleInput!\n  ) {\n    updateSale(accountId: $accountId, saleId: $saleId, input: $input) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      sequenceNumber\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccount($accountId: String!) {\n    account(accountId: $accountId) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query GetAccount($accountId: String!) {\n    account(accountId: $accountId) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAccounts {\n    accounts {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query GetAccounts {\n    accounts {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetApiTokens($accountId: String!, $first: Int, $after: String) {\n    apiTokens(accountId: $accountId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          roles\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetApiTokens($accountId: String!, $first: Int, $after: String) {\n    apiTokens(accountId: $accountId, first: $first, after: $after) {\n      edges {\n        cursor\n        node {\n          id\n          name\n          roles\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHookSubscriptions($accountId: String!) {\n    actionHookSubscriptions(accountId: $accountId) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHookSubscriptions($accountId: String!) {\n    actionHookSubscriptions(accountId: $accountId) {\n      accountId\n      action\n      url\n      headers {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetItem($accountId: String!, $itemId: String!) {\n    item(accountId: $accountId, itemId: $itemId) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n      saleId\n    }\n  }\n"): (typeof documents)["\n  query GetItem($accountId: String!, $itemId: String!) {\n    item(accountId: $accountId, itemId: $itemId) {\n      id\n      title\n      description\n      valuationAmount\n      valuationCurrency\n      saleId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetItems(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $itemsFilter: ItemsFilter!\n  ) {\n    items(\n      accountId: $accountId\n      first: $first\n      after: $after\n      itemsFilter: $itemsFilter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          valuationAmount\n          valuationCurrency\n          saleId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItems(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $itemsFilter: ItemsFilter!\n  ) {\n    items(\n      accountId: $accountId\n      first: $first\n      after: $after\n      itemsFilter: $itemsFilter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          valuationAmount\n          valuationCurrency\n          saleId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SalesAggregate($accountId: String!) {\n    salesAggregate(accountId: $accountId) {\n      open\n      closing\n      closed\n      published\n      unpublished\n    }\n  }\n"): (typeof documents)["\n  query SalesAggregate($accountId: String!) {\n    salesAggregate(accountId: $accountId) {\n      open\n      closing\n      closed\n      published\n      unpublished\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSales(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $filter: SaleFilter\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sales(\n      accountId: $accountId\n      first: $first\n      after: $after\n      filter: $filter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          currency\n          status\n          closingMethod\n          dates {\n            closingDate\n            openDate\n          }\n          items {\n            edges {\n              node {\n                id\n                title\n                description\n              }\n            }\n          }\n          closingTimeCountdown\n          participants(take: $take, cursor: $cursor, direction: $direction) {\n            edges {\n              cursor\n              node {\n                userId\n              }\n            }\n            totalCount\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSales(\n    $accountId: String!\n    $first: Int\n    $after: String\n    $filter: SaleFilter\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sales(\n      accountId: $accountId\n      first: $first\n      after: $after\n      filter: $filter\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          title\n          description\n          currency\n          status\n          closingMethod\n          dates {\n            closingDate\n            openDate\n          }\n          items {\n            edges {\n              node {\n                id\n                title\n                description\n              }\n            }\n          }\n          closingTimeCountdown\n          participants(take: $take, cursor: $cursor, direction: $direction) {\n            edges {\n              cursor\n              node {\n                userId\n              }\n            }\n            totalCount\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSale(\n    $accountId: String!\n    $id: ID!\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sale(accountId: $accountId, id: $id) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              bidId\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n              bidSequenceNumber\n            }\n            dates {\n              closingStart\n              closingEnd\n            }\n            allowedBidTypes\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n      participants(take: $take, cursor: $cursor, direction: $direction) {\n        edges {\n          cursor\n          node {\n            userId\n          }\n        }\n        totalCount\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSale(\n    $accountId: String!\n    $id: ID!\n    $take: Int\n    $cursor: String\n    $direction: PaginationDirection\n  ) {\n    sale(accountId: $accountId, id: $id) {\n      id\n      accountId\n      title\n      description\n      currency\n      status\n      closingMethod\n      items {\n        edges {\n          cursor\n          node {\n            id\n            title\n            totalBids\n            description\n            currentBid\n            leaderId\n            saleId\n            reserve\n            startingBid\n            lowEstimate\n            highEstimate\n            itemNumber\n            bids {\n              bidId\n              amount\n              userId\n              date\n              bidStatus\n              maxAmount\n              bidSequenceNumber\n            }\n            dates {\n              closingStart\n              closingEnd\n            }\n            allowedBidTypes\n          }\n        }\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n      incrementTable {\n        rules {\n          highRange\n          lowRange\n          step\n        }\n      }\n      dates {\n        closingDate\n        openDate\n      }\n      closingTimeCountdown\n      participants(take: $take, cursor: $cursor, direction: $direction) {\n        edges {\n          cursor\n          node {\n            userId\n          }\n        }\n        totalCount\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;